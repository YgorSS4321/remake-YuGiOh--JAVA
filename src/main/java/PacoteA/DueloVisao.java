package PacoteA;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JList;
import javax.swing.event.ListSelectionListener;
import javax.swing.event.ListSelectionEvent;
/**
 *
 * @author ygor
 */
public class DueloVisao extends javax.swing.JFrame{

    /**
     * Creates new form Duelo
     * @deprecated 
     */
    public DueloVisao(String titulo) {
        initComponents();
        
        Collections.shuffle(deckArrayL);
        atualizarTudo();
        
        setTitle(titulo);
        mainPhaseJB.setEnabled(false);
        battlePhaseJB.setEnabled(false);
        finalPhaseJB.setEnabled(false);
        
        lifePoints = 4000;
        lpJLabel.setText(String.valueOf(lifePoints));
        
        nomeJLabel.setText(titulo);
       
        ativarJB.setEnabled(false);
        invocarJB.setEnabled(false);
        atacarJB1.setEnabled(false);
        
    }   
    
    public DueloVisao(String titulo, ArrayList<String> meuDeck, ArrayList<String> deckOponente) {
        initComponents();
        
        deckArrayL.removeAll(deckArrayL);
        deckArrayL.addAll(meuDeck);
        
        this.deckArrayL_Op.removeAll(this.deckArrayL_Op);
        this.deckArrayL_Op.addAll(deckOponente);
        
        
        Collections.shuffle(deckArrayL);
        Collections.shuffle(deckArrayL_Op);
        
        int n = mao_inicial;
        while(n > 0){
            this.draw();
            n--;
        }
        atualizarTudo();
        
        setTitle(titulo);
        mainPhaseJB.setEnabled(false);
        battlePhaseJB.setEnabled(false);
        finalPhaseJB.setEnabled(false);
        
        lifePoints = 4000;
        lpJLabel.setText(String.valueOf(lifePoints));
        
        nomeJLabel.setText(titulo);
        
        ativarJB.setEnabled(false);
        invocarJB.setEnabled(false);
        atacarJB1.setEnabled(false);
    }
    
    /**
     *
     * @param titulo nome do duelista 
     * @param meuDeckVetor deck contendo os nomes das cartas que estarão no seu deck, podendo incluir até 3 cópias de cada carta
     * @param deckOponenteVetor deck contendo os nomes das cartas que estarão no deck do seu oponente, podendo incluir até 3 cópias de cada carta
     */
    public DueloVisao(String titulo, String[] meuDeckVetor, String[] deckOponenteVetor) {
        initComponents();
        ArrayList<String> meuDeck = new ArrayList(Arrays.asList(meuDeckVetor));
        ArrayList<String> deckOponente = new ArrayList(Arrays.asList(deckOponenteVetor));
        
        deckArrayL.removeAll(deckArrayL);
        deckArrayL.addAll(meuDeck);
        
        this.deckArrayL_Op.removeAll(this.deckArrayL_Op);
        this.deckArrayL_Op.addAll(deckOponente);
        
        
        Collections.shuffle(deckArrayL);
        Collections.shuffle(deckArrayL_Op);
        int n = mao_inicial;
        while(n > 0){
            this.draw();
            n--;
        }
        atualizarTudo();
        
        setTitle(titulo);
        mainPhaseJB.setEnabled(false);
        battlePhaseJB.setEnabled(false);
        finalPhaseJB.setEnabled(false);
        
        lifePoints = 4000;
        lpJLabel.setText(String.valueOf(lifePoints));
        
        nomeJLabel.setText(titulo);
        
        ativarJB.setEnabled(false);
        invocarJB.setEnabled(false);
        atacarJB1.setEnabled(false);
    }
   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        handJList = new javax.swing.JList<>();
        jScrollPane2 = new javax.swing.JScrollPane();
        deckJList = new javax.swing.JList<>();
        jScrollPane3 = new javax.swing.JScrollPane();
        graveJList = new javax.swing.JList<>();
        verJB = new javax.swing.JButton();
        ativarJB = new javax.swing.JButton();
        invocarJB = new javax.swing.JButton();
        drawJB = new javax.swing.JButton();
        skillJB = new javax.swing.JButton();
        toGraveJB1 = new javax.swing.JButton();
        jScrollPane4 = new javax.swing.JScrollPane();
        fieldJList = new javax.swing.JList<>();
        shuffleJB = new javax.swing.JButton();
        jScrollPane5 = new javax.swing.JScrollPane();
        fieldJListOp = new javax.swing.JList<>();
        jScrollPane6 = new javax.swing.JScrollPane();
        graveJListOp = new javax.swing.JList<>();
        jScrollPane7 = new javax.swing.JScrollPane();
        handJListOp = new javax.swing.JList<>();
        jScrollPane8 = new javax.swing.JScrollPane();
        deckJListOp = new javax.swing.JList<>();
        drawPhaseJB = new javax.swing.JButton();
        mainPhaseJB = new javax.swing.JButton();
        battlePhaseJB = new javax.swing.JButton();
        finalPhaseJB = new javax.swing.JButton();
        surrenderJB = new javax.swing.JButton();
        nomeOponenteJLabel = new javax.swing.JLabel();
        lpOpJLabel = new javax.swing.JLabel();
        nomeJLabel = new javax.swing.JLabel();
        lpJLabel = new javax.swing.JLabel();
        dano500JB = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        atacarJB1 = new javax.swing.JButton();
        criarTokenJB = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        handJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        handJList.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                handJListPropertyChange(evt);
            }
        });
        handJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                handJListValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(handJList);

        deckJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        deckJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                deckJListValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(deckJList);

        graveJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        graveJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                graveJListValueChanged(evt);
            }
        });
        jScrollPane3.setViewportView(graveJList);

        verJB.setText("ver");
        verJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                verJBActionPerformed(evt);
            }
        });

        ativarJB.setText("ativar");
        ativarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ativarJBActionPerformed(evt);
            }
        });

        invocarJB.setText("invocacao");
        invocarJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                invocarJBActionPerformed(evt);
            }
        });

        drawJB.setText("draw");
        drawJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawJBActionPerformed(evt);
            }
        });

        skillJB.setText("skill");
        skillJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                skillJBActionPerformed(evt);
            }
        });

        toGraveJB1.setText("toGrave");
        toGraveJB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                toGraveJB1ActionPerformed(evt);
            }
        });

        fieldJList.setBorder(new javax.swing.border.MatteBorder(null));
        fieldJList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fieldJList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fieldJListValueChanged(evt);
            }
        });
        jScrollPane4.setViewportView(fieldJList);

        shuffleJB.setText("Shuffle deck");
        shuffleJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shuffleJBActionPerformed(evt);
            }
        });

        fieldJListOp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        fieldJListOp.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                fieldJListOpValueChanged(evt);
            }
        });
        jScrollPane5.setViewportView(fieldJListOp);

        graveJListOp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        graveJListOp.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                graveJListOpValueChanged(evt);
            }
        });
        jScrollPane6.setViewportView(graveJListOp);

        handJListOp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        handJListOp.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                handJListOpValueChanged(evt);
            }
        });
        jScrollPane7.setViewportView(handJListOp);

        deckJListOp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        deckJListOp.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                deckJListOpValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(deckJListOp);

        drawPhaseJB.setText("D.P.");
        drawPhaseJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                drawPhaseJBActionPerformed(evt);
            }
        });

        mainPhaseJB.setText("M.P.");
        mainPhaseJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mainPhaseJBActionPerformed(evt);
            }
        });

        battlePhaseJB.setText("B.P.");
        battlePhaseJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                battlePhaseJBActionPerformed(evt);
            }
        });

        finalPhaseJB.setText("F.P.");
        finalPhaseJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                finalPhaseJBActionPerformed(evt);
            }
        });

        surrenderJB.setText("surrender");
        surrenderJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                surrenderJBActionPerformed(evt);
            }
        });

        nomeOponenteJLabel.setText("nomeOponente");

        lpOpJLabel.setText("4000");

        nomeJLabel.setText("nome:");

        lpJLabel.setText("4000");

        dano500JB.setText("500 de dano");
        dano500JB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dano500JBActionPerformed(evt);
            }
        });

        jLabel1.setText("LP:");

        atacarJB1.setText("atacar");
        atacarJB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                atacarJB1ActionPerformed(evt);
            }
        });

        criarTokenJB.setText("criar token");
        criarTokenJB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                criarTokenJBActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(atacarJB1)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(ativarJB)
                                .addGap(33, 33, 33)
                                .addComponent(invocarJB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(verJB, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 127, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane4)
                            .addComponent(jScrollPane5)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(nomeJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(16, 16, 16)
                                        .addComponent(lpJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(6, 6, 6)
                                            .addComponent(drawPhaseJB)
                                            .addGap(16, 16, 16)
                                            .addComponent(mainPhaseJB)
                                            .addGap(18, 18, 18)
                                            .addComponent(battlePhaseJB)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                            .addComponent(finalPhaseJB))))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(dano500JB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(skillJB, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                        .addComponent(drawJB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                        .addComponent(toGraveJB1, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                        .addComponent(shuffleJB, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                                        .addComponent(surrenderJB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addComponent(nomeOponenteJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(lpOpJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(criarTokenJB, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nomeJLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(nomeOponenteJLabel)
                                .addGap(18, 18, 18)
                                .addComponent(lpOpJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(criarTokenJB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(dano500JB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(surrenderJB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shuffleJB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(toGraveJB1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(drawJB))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addComponent(lpJLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(skillJB)
                    .addComponent(drawPhaseJB)
                    .addComponent(mainPhaseJB)
                    .addComponent(battlePhaseJB)
                    .addComponent(finalPhaseJB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3)
                            .addComponent(jScrollPane4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(verJB)
                                    .addComponent(ativarJB)
                                    .addComponent(invocarJB))))
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(atacarJB1)
                        .addGap(192, 192, 192))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void verJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_verJBActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(null, Carta.descricao, "detalhes", JOptionPane.INFORMATION_MESSAGE);
        if(!(deckJList.isSelectionEmpty())){
            Carta card = Gerenciamento2.pesquisarCartaPorNome(deckJList.getSelectedValue());
            JOptionPane.showMessageDialog(null, card.verDetalhes(),"DETALHES" , JOptionPane.INFORMATION_MESSAGE);
        
        }else if(!(handJList.isSelectionEmpty())){
            Carta card = Gerenciamento2.pesquisarCartaPorNome(handJList.getSelectedValue());
            JOptionPane.showMessageDialog(null, card.verDetalhes(),"DETALHES" , JOptionPane.INFORMATION_MESSAGE);
        
            
        }else if(!(fieldJList.isSelectionEmpty())){
            Carta card = Gerenciamento2.pesquisarCartaPorNome(fieldJList.getSelectedValue());
            JOptionPane.showMessageDialog(null, card.verDetalhes(),"DETALHES" , JOptionPane.INFORMATION_MESSAGE);
        
        
        }else if(!(graveJList.isSelectionEmpty())){
            Carta card = Gerenciamento2.pesquisarCartaPorNome(graveJList.getSelectedValue());
            JOptionPane.showMessageDialog(null, card.verDetalhes(),"DETALHES" , JOptionPane.INFORMATION_MESSAGE);
        
        
        }else{
            JOptionPane.showMessageDialog(null, "Selecao nao encontrada", "DETALHES", JOptionPane.INFORMATION_MESSAGE);
            
        }
        
        
    }//GEN-LAST:event_verJBActionPerformed

    private void ativarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ativarJBActionPerformed

        if(!(deckJList.isSelectionEmpty())){
            this.ativarPorNome(deckJList.getSelectedValue(), deckArrayL);
        
        }else if(!(handJList.isSelectionEmpty())){
            this.ativarPorNome(handJList.getSelectedValue(), handArrayL);
            
        }else if(!(fieldJList.isSelectionEmpty())){
            this.ativarPorNome(fieldJList.getSelectedValue(), fieldArrayL);
        
        }else if(!(graveJList.isSelectionEmpty())){
            this.ativarPorNome(graveJList.getSelectedValue(), graveArrayL);
        
        }else{
            JOptionPane.showMessageDialog(null, "Selecao nao encontrada", "Erro", JOptionPane.WARNING_MESSAGE);
            
        }
    }//GEN-LAST:event_ativarJBActionPerformed

    private void invocarJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_invocarJBActionPerformed
        // TODO add your handling code here:
        if(!(handJList.isSelectionEmpty())){
            int[] index = handJList.getSelectedIndices();
            String nomeCarta = handJList.getSelectedValue();
            
            Carta card = Gerenciamento2.pesquisarCartaPorNome(nomeCarta);
            
            if(card instanceof Monstro){
                if(((Monstro) card).invocar(this) == true){
                    //realiza a invocacao com as condicoes especificas de cada carta
                    //((Monstro) card).invocar(this);
                
                }else if(((Monstro) card).getNivel() > 0 && ((Monstro) card).getNivel() <= 4){
                    this.moverCarta(handArrayL, index[0], fieldArrayL);
                    
                }else if(((Monstro) card).getNivel() >= 5 && ((Monstro) card).getNivel() <= 6){
                    EscolherCarta dialog = new EscolherCarta(new javax.swing.JFrame(), true, fieldArrayL, 1,"Escolha 1 monstro para tributar: ");
                    
                    dialog.setVisible(true);
                    dialog.atualizarJList(fieldArrayL);
                    
                    
                    //envia a carta tributada para o grave
                    this.moverCarta(this.getFieldArrayL(), dialog.getResultado()[0], this.getGraveArrayL());   
                    
                    
                    //invoca o monstro para o campo
                    this.moverCarta(this.getHandArrayL(), index[0], this.getFieldArrayL());   
                    
                    
                }else if(((Monstro) card).getNivel() >= 7){
                    EscolherCarta dialog = new EscolherCarta(new javax.swing.JFrame(), true, fieldArrayL, 2,"Escolha 2 monstro para tributar: ");
                    
                    dialog.setVisible(true);
                    dialog.atualizarJList(fieldArrayL);
                    
                    //invoca o monstro para o campo
                    this.moverCarta(this.getHandArrayL(), handJList, this.getFieldArrayL());   
                    
                    
                    //envia a carta tributada para o grave
                    this.moverCarta(this.getFieldArrayL(), dialog.getResultado()[0], this.getGraveArrayL());   
                    this.moverCarta(this.getFieldArrayL(), (dialog.getResultado()[1] - 1), this.getGraveArrayL());
                    
                    //ArrayIndexOfBoundsException NO CODIGO ACIMA
                    
                }else{
                    JOptionPane.showMessageDialog(null, "Pelo jeito ele precisa ser invocado por especial");
                }
                
            }
            this.atualizarTudo();
            
            
        }
    }//GEN-LAST:event_invocarJBActionPerformed

    private void drawJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawJBActionPerformed
        // TODO add your handling code here:
        draw();
    }//GEN-LAST:event_drawJBActionPerformed

    private void skillJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_skillJBActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_skillJBActionPerformed

    private void handJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_handJListValueChanged
        // TODO add your handling code here:
        deckJList.clearSelection();
        graveJList.clearSelection();
        fieldJList.clearSelection();
        
        handJListOp.clearSelection();
        deckJListOp.clearSelection();
        graveJListOp.clearSelection();
        fieldJListOp.clearSelection();
        
        DueloVisao.colorirSelecao(handJList);
    }//GEN-LAST:event_handJListValueChanged

    private void handJListPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_handJListPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_handJListPropertyChange

    private void graveJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_graveJListValueChanged
        // TODO add your handling code here:
        handJList.clearSelection();
        deckJList.clearSelection();
        fieldJList.clearSelection();
        
        handJListOp.clearSelection();
        deckJListOp.clearSelection();
        graveJListOp.clearSelection();
        fieldJListOp.clearSelection();
        
        DueloVisao.colorirSelecao(graveJList);
    }//GEN-LAST:event_graveJListValueChanged

    private void toGraveJB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_toGraveJB1ActionPerformed
        // TODO add your handling code here:
        if(!(handJList.isSelectionEmpty())){
            this.moverCarta(handArrayL, handJList, graveArrayL);
        }else if(!(deckJList.isSelectionEmpty())){
            this.moverCarta(deckArrayL, deckJList, graveArrayL); 
        }else if(!(fieldJList.isSelectionEmpty())){
            this.moverCarta(fieldArrayL, fieldJList, graveArrayL);
       
        }else if(!(handJListOp.isSelectionEmpty())){
            this.moverCarta(handArrayL_Op, handJListOp, graveArrayL_Op);
        }else if(!(deckJListOp.isSelectionEmpty())){
            this.moverCarta(deckArrayL_Op, deckJListOp, graveArrayL_Op); 
        }else if(!(fieldJListOp.isSelectionEmpty())){
            this.moverCarta(fieldArrayL_Op, fieldJListOp, graveArrayL_Op);
       
        }else{
            JOptionPane.showMessageDialog(null, "nenhuma carta selecionada", "Alerta", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_toGraveJB1ActionPerformed

    private void deckJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_deckJListValueChanged
        // TODO add your handling code here:System.out.println("testando grave");
        handJList.clearSelection();
        graveJList.clearSelection();
        fieldJList.clearSelection();
        
        handJListOp.clearSelection();
        deckJListOp.clearSelection();
        graveJListOp.clearSelection();
        fieldJListOp.clearSelection();
        
        DueloVisao.colorirSelecao(deckJList);
    }//GEN-LAST:event_deckJListValueChanged

    private void fieldJListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fieldJListValueChanged
        // TODO add your handling code here:
        handJList.clearSelection();
        deckJList.clearSelection();
        graveJList.clearSelection();
        
        handJListOp.clearSelection();
        deckJListOp.clearSelection();
        graveJListOp.clearSelection();
        fieldJListOp.clearSelection();
        DueloVisao.colorirSelecao(fieldJList);
    }//GEN-LAST:event_fieldJListValueChanged

    private void graveJListOpValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_graveJListOpValueChanged
        // TODO add your handling code here:
        handJList.clearSelection();
        deckJList.clearSelection();
        graveJList.clearSelection();
        fieldJList.clearSelection();
        
        fieldJListOp.clearSelection();
        handJListOp.clearSelection();
        deckJListOp.clearSelection();
        
        DueloVisao.colorirSelecao(graveJListOp);
    }//GEN-LAST:event_graveJListOpValueChanged

    private void handJListOpValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_handJListOpValueChanged
        // TODO add your handling code here:
        handJList.clearSelection();
        deckJList.clearSelection();
        graveJList.clearSelection();
        fieldJList.clearSelection();
        
        graveJListOp.clearSelection();
        fieldJListOp.clearSelection();
        deckJListOp.clearSelection();
        
        DueloVisao.colorirSelecao(handJListOp);
    }//GEN-LAST:event_handJListOpValueChanged

    private void deckJListOpValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_deckJListOpValueChanged
        // TODO add your handling code here:
        
        handJList.clearSelection();
        deckJList.clearSelection();
        graveJList.clearSelection();
        fieldJList.clearSelection();
        
        graveJListOp.clearSelection();
        handJListOp.clearSelection();
        fieldJListOp.clearSelection();
        
        DueloVisao.colorirSelecao(deckJListOp);
    }//GEN-LAST:event_deckJListOpValueChanged

    private void mainPhaseJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mainPhaseJBActionPerformed
        // TODO add your handling code here:
        if(phase.equals("mainPhase")){
            JOptionPane.showMessageDialog(null, "Ja esta na main phase");
        }else{
            mainPhaseJB.setBackground(new java.awt.Color(255,204,102));
            mainPhaseJB.setForeground(new java.awt.Color(0,0,0));
            phase = "mainPhase";
            
            drawPhaseJB.setEnabled(false);
            battlePhaseJB.setEnabled(true);
            finalPhaseJB.setEnabled(true);
            
            ativarJB.setEnabled(true);
            invocarJB.setEnabled(true);
        }
        
        
        
    }//GEN-LAST:event_mainPhaseJBActionPerformed

    private void battlePhaseJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_battlePhaseJBActionPerformed
        // TODO add your handling code here:
        
        if(phase.equals("battlePhase")){
            JOptionPane.showMessageDialog(null, "Ja esta na fase de batalha");
            
            
        }else{
            ativarJB.setEnabled(false);
            invocarJB.setEnabled(false);
            atacarJB1.setEnabled(true);
            
            mainPhaseJB.setBackground(new java.awt.Color(238,238,238));
            mainPhaseJB.setForeground(new java.awt.Color(51,51,51));
            mainPhaseJB.setEnabled(false);

            battlePhaseJB.setBackground(new java.awt.Color(255,204,102));
            battlePhaseJB.setForeground(new java.awt.Color(0,0,0));
            phase = "battlePhase";
        }
    }//GEN-LAST:event_battlePhaseJBActionPerformed

    private void finalPhaseJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_finalPhaseJBActionPerformed
        // TODO add your handling code here:
        if(phase.equals("finalPhase")){
            JOptionPane.showMessageDialog(null, "Ja esta na finalPhase");
        }else{
            ativarJB.setEnabled(false);
            invocarJB.setEnabled(false);
            atacarJB1.setEnabled(false);
            
            mainPhaseJB.setBackground(new java.awt.Color(238,238,238));
            mainPhaseJB.setForeground(new java.awt.Color(51,51,51));
            mainPhaseJB.setEnabled(false);

            battlePhaseJB.setBackground(new java.awt.Color(238,238,238));
            battlePhaseJB.setForeground(new java.awt.Color(51,51,51));
            battlePhaseJB.setEnabled(false);
            
            
            for(Carta card: Gerenciamento2.getCardDatabase()){
                if(card instanceof Monstro && this.fieldArrayL.contains(card)){
                    ((Monstro) card).setQ_atk(1);
                }
            }

            
        
            try{
               Thread.sleep(3000);
            }catch(InterruptedException e){
                e.printStackTrace();
            }

            finalPhaseJB.setBackground(new java.awt.Color(238,238,238));
            finalPhaseJB.setForeground(new java.awt.Color(51,51,51));
            finalPhaseJB.setEnabled(false);

            JOptionPane.showMessageDialog(null, "Fase Final");
            
            phase = "Oponente";

        }
        
            
        
    }//GEN-LAST:event_finalPhaseJBActionPerformed

    private void drawPhaseJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_drawPhaseJBActionPerformed
        // TODO add your handling code here:
        if(phase.equals("drawPhase")){
            JOptionPane.showMessageDialog(null, "ja esta na drawPhase");
        }else{
            phase = "drawPhase";
            
            
            try {
                Thread.sleep(500);
            } catch (InterruptedException ex) {
                Logger.getLogger(DueloVisao.class.getName()).log(Level.SEVERE, null, ex);
            }
            

            this.draw();
            mainPhaseJB.setEnabled(true);
            ativarJB.setEnabled(true);
            invocarJB.setEnabled(true);

            drawPhaseJB.setBackground(new java.awt.Color(238,238,238));
            drawPhaseJB.setForeground(new java.awt.Color(51,51,51));

            try{
            Thread.sleep(500);
            }catch(InterruptedException e){
                e.printStackTrace();
            }

            mainPhaseJB.doClick();
            
        }
        
        
        
    }//GEN-LAST:event_drawPhaseJBActionPerformed

    private void fieldJListOpValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_fieldJListOpValueChanged
        // TODO add your handling code here:
        handJList.clearSelection();
        deckJList.clearSelection();
        graveJList.clearSelection();
        fieldJList.clearSelection();
        
        graveJListOp.clearSelection();
        handJListOp.clearSelection();
        deckJListOp.clearSelection();
        
        DueloVisao.colorirSelecao(deckJListOp);
    }//GEN-LAST:event_fieldJListOpValueChanged

    private void shuffleJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shuffleJBActionPerformed
        // TODO add your handling code here:
        Collections.shuffle(deckArrayL);
        atualizarTudo();
    }//GEN-LAST:event_shuffleJBActionPerformed

    private void surrenderJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_surrenderJBActionPerformed
        // TODO add your handling code here:
        this.lifePoints = 0;
        lpJLabel.setText(String.valueOf(lifePoints));
    }//GEN-LAST:event_surrenderJBActionPerformed

    private void dano500JBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dano500JBActionPerformed
        // TODO add your handling code here:
        causarDanoAoOponente(500);

    }//GEN-LAST:event_dano500JBActionPerformed

    private void atacarJB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_atacarJB1ActionPerformed
        // TODO add your handling code here:
        
        
        if(!(fieldJList.isSelectionEmpty())){
            Monstro m = ((Monstro) Gerenciamento2.pesquisarCartaPorNome(fieldArrayL, fieldJList.getSelectedValue()));
            if(m.getQ_atk() > 0){
                if(this.fieldArrayL_Op.isEmpty()){
                    //causar dano
                    Carta card = Gerenciamento2.pesquisarCartaPorNome(fieldJList.getSelectedValue());
                    causarDanoAoOponente(((Monstro) card).getAtk());
                    m.setQ_atk(m.getQ_atk() - 1);
                }else{
                    EscolherCarta dialog = new EscolherCarta(new javax.swing.JFrame(),true, fieldArrayL_Op, 1, "escolha o alvo do ataque: ");
                    dialog.setVisible(true);
                    dialog.atualizarJList(fieldArrayL_Op);

                    String nomeAtacante = fieldJList.getSelectedValue();
                    String nomeAlvo = fieldArrayL_Op.get(dialog.getResultado()[0]);
                    this.batalha(nomeAtacante, nomeAlvo);                

                    System.out.println("Tesgd");

                    System.out.println(nomeAtacante + " " + nomeAlvo);
                    
                    m.setQ_atk(m.getQ_atk() - 1);
                }
                
            }else{
                JOptionPane.showMessageDialog(null, "Este monstro já atacou");
            }
            
            
            
            
        }else{
            JOptionPane.showMessageDialog(null, "Nenhum Monstro Selecionado");
        }
        
    }//GEN-LAST:event_atacarJB1ActionPerformed

    private void criarTokenJBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_criarTokenJBActionPerformed
        // TODO add your handling code here:
        this.getFieldArrayL().add("token");
        atualizarTudo();
    }//GEN-LAST:event_criarTokenJBActionPerformed
    
    private void batalha(String meuMonstro, String monstroOp){
        Carta myMonster = Gerenciamento2.pesquisarCartaPorNome(meuMonstro);
        Carta monsterOp = Gerenciamento2.pesquisarCartaPorNome(monstroOp);
        
        JOptionPane.showMessageDialog(null, monstroOp + " " + this.fieldArrayL.indexOf(monstroOp) + "\n" + this.fieldArrayL_Op);
        
        if(((Monstro) myMonster).getAtk() == ((Monstro) monsterOp).getAtk()){
            //destroi ambos os monstros
            this.moverCarta(this.getFieldArrayL(),this.fieldArrayL.indexOf(meuMonstro) , this.getGraveArrayL());   
            this.moverCarta(this.getFieldArrayL_Op(), this.fieldArrayL_Op.indexOf(monstroOp), this.getGraveArrayL_Op());
            
        }else if(((Monstro) myMonster).getAtk() > ((Monstro) monsterOp).getAtk()){
            //destroi o monstro do oponente e causa dano nele
            this.causarDanoAoOponente(((Monstro) myMonster).getAtk() - ((Monstro) monsterOp).getAtk());
            this.moverCarta(this.getFieldArrayL_Op(), this.fieldArrayL_Op.indexOf(monstroOp), this.getGraveArrayL_Op());
            
        }else if(((Monstro) myMonster).getAtk() < ((Monstro) myMonster).getAtk()){
            //destroi o meu monstro e eu levo dano
            this.causarDanoAoOponente(((Monstro) monsterOp).getAtk() - ((Monstro) myMonster).getAtk());
            this.moverCarta(this.getFieldArrayL(), this.fieldArrayL.indexOf(myMonster), this.getGraveArrayL());
        }else{
            
        }
            
        
    }
    
    public void causarDanoAoOponente(int damage){
        this.getLpOpJLabel().setText(String.valueOf(Integer.parseInt(this.getLpOpJLabel().getText()) - damage));
    }
    
    
    /**
     * 
     * @param arrayL1 ArrayList do remetente
     * @param jlist1 JList do remetente
     * @param arrayL2 ArrayList do destinatario
     */
    public void moverCarta(ArrayList<String> arrayL1,JList jlist1, ArrayList<String> arrayL2){
        int carta_escolhida = jlist1.getSelectedIndex();
        arrayL2.add(arrayL1.get(carta_escolhida));            
        arrayL1.remove(carta_escolhida);
        
        atualizarTudo();
    }
    /**
     * 
     * @param arrayL1 ArrayList do remetente
     * @param indice do remetente
     * @param arrayL2 ArrayList do destinatario
     */
    public void moverCarta(ArrayList<String> arrayL1,int index, ArrayList<String> arrayL2){
        int carta_escolhida = index;
        arrayL2.add(arrayL1.get(carta_escolhida));            
        arrayL1.remove(carta_escolhida);
      
        atualizarTudo();
    }
    
    
    private void atualizarJList(ArrayList<String> arrayL, JList jList){
        String[] l = new String[arrayL.size()];
        for(int i = 0; i < l.length; i++){
            l[i] = arrayL.get(i);
        }   
        jList.setListData(l);
    }
    
    public void atualizarTudo(){
        atualizarJList(deckArrayL, deckJList);        
        atualizarJList(fieldArrayL, fieldJList);        
        atualizarJList(graveArrayL, graveJList);      
        atualizarJList(handArrayL, handJList);
        
        atualizarJList(deckArrayL_Op, deckJListOp);        
        atualizarJList(fieldArrayL_Op, fieldJListOp);        
        atualizarJList(graveArrayL_Op, graveJListOp);      
        atualizarJList(handArrayL_Op, handJListOp);    
    }
    
    private void ativarPorNome(String nomeCarta, ArrayList<String> arrayL){
        
        
        Carta card = Gerenciamento2.pesquisarCartaPorNome(arrayL, nomeCarta);

        if(card != null && card.isImplementado()){
            card.ativar(this);
            
            //envia para o cemiterio
            //this.handArrayL.remove(nomeCarta);
            //this.graveArrayL.add(nomeCarta);
        }

        this.atualizarTudo();
    }
    
    public void draw(){
        if(!deckArrayL.isEmpty()){
            String topOfDeck = deckArrayL.get(0);
            handArrayL.add(topOfDeck);
            deckArrayL.remove(0);
            atualizarTudo();
            
        }else{
            JOptionPane.showMessageDialog(null, "DeckOut!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }
        
    }
    public void draw(int n) throws ArrayIndexOutOfBoundsException{
        //destiny draw
        moverCarta(deckArrayL,n, handArrayL);
    }
    
    public void drawOp(){
        if(!deckArrayL_Op.isEmpty()){
            String topOfDeck = deckArrayL_Op.get(0);
            handArrayL_Op.add(topOfDeck);
            deckArrayL_Op.remove(0);
            atualizarTudo();            
        }else{
            JOptionPane.showMessageDialog(null, "DeckOut!", "Alerta", JOptionPane.WARNING_MESSAGE);
        }
        
    }
    
    
    
    
    public static void colorirSelecao(JList jList){
        Carta card = Gerenciamento2.pesquisarCartaPorNome((String)(jList.getSelectedValue()));
        if(card == null){
            jList.setSelectionBackground(new Color(184,207,229));
        }else if(card instanceof Magia){
            jList.setSelectionBackground(Color.GREEN);
        }else if(card instanceof Monstro){
            if(((Monstro) card).getDescricao().equals("normal")){
                jList.setSelectionBackground(Color.YELLOW);
            }else{
                jList.setSelectionBackground(Color.ORANGE);
            }
        }else{
            // if(card instanceof Armadilha){
            jList.setSelectionBackground(new Color(184,207,229));
        }
        
    }
    /**
     * @deprecated 
     * @param monstroString
     * @return 
     * pega o monstro.toString() e retorna o valor do monstro.getNome()
     */
    
    public static String converteMonstroToStringEmMonstroNome(String monstroString){
        String[] r = monstroString.split(" ATK/");
        //usar regex
        
        return r[0];
    }
    
    
    
    
    
    
    
    private ArrayList<String> deckArrayL = new ArrayList(List.of("rei caveira", "facinacao das trevas", "servo caveira", "item2", "item3", "item4", "item5"));
    private ArrayList<String> handArrayL = new ArrayList();
    private ArrayList<String> graveArrayL = new ArrayList();
    private ArrayList<String> fieldArrayL = new ArrayList(List.of("token", "token", "token"));
    private String phase = "inicio"; 
    private int lifePoints;
    
    private int mao_inicial = 4;
    
    
    private ArrayList<String> deckArrayL_Op = new ArrayList(List.of("dragão branco de olhos azuis", "facinacao das trevas", "mago negro", "item2", "item3", "item4", "item5"));
    private ArrayList<String> handArrayL_Op = new ArrayList();
    private ArrayList<String> graveArrayL_Op = new ArrayList();
    private ArrayList<String> fieldArrayL_Op = new ArrayList(List.of("token", "token", "token"));

    public int getMao_inicial() {
        return mao_inicial;
    }

    public void setMao_inicial(int mao_inicial) {
        this.mao_inicial = mao_inicial;
    }
    
    public ArrayList<String> getDeckArrayL() {
        return deckArrayL;
    }

    public ArrayList<String> getHandArrayL() {
        return handArrayL;
    }

    public ArrayList<String> getGraveArrayL() {
        return graveArrayL;
    }

    public ArrayList<String> getFieldArrayL() {
        return fieldArrayL;
    }

    public JList<String> getDeckJList() {
        return deckJList;
    }

    public JList<String> getFieldJList() {
        return fieldJList;
    }

    public JList<String> getGraveJList() {
        return graveJList;
    }

    public JList<String> getHandJList() {
        return handJList;
    }

    public void setDeckArrayL(ArrayList<String> deckArrayL) {
        this.deckArrayL = deckArrayL;
    }

    public void setHandArrayL(ArrayList<String> handArrayL) {
        this.handArrayL = handArrayL;
    }

    public void setGraveArrayL(ArrayList<String> graveArrayL) {
        this.graveArrayL = graveArrayL;
    }

    public void setFieldArrayL(ArrayList<String> fieldArrayL) {
        this.fieldArrayL = fieldArrayL;
    }
    
    public String getPhase() {
        return phase;
    }

    public void setPhase(String phase) {
        this.phase = phase;
    }

    public JButton getDrawPhaseJB() {
        return drawPhaseJB;
    }

    public void setDrawPhaseJB(JButton drawPhaseJB) {
        this.drawPhaseJB = drawPhaseJB;
    }
    
    public int getLifePoints() {
        return lifePoints;
    }

    public void setLifePoints(int lifePoints) {
        this.lifePoints = lifePoints;
    }
    public JLabel getNomeJLabel() {
        return nomeJLabel;
    }

    public JLabel getLpJLabel() {
        return lpJLabel;
    }

    public void setLpJLabel(JLabel lpJLabel) {
        this.lpJLabel = lpJLabel;
    }
    

    //coisas do oponente que posteriormente vai ser espelhado com o outro
    public JList<String> getDeckJListOp() {
        return deckJListOp;
    }

    public void setDeckJListOp(JList<String> deckJListOp) {
        this.deckJListOp = deckJListOp;
    }

    public JList<String> getFieldJListOp() {
        return fieldJListOp;
    }

    public void setFieldJListOp(JList<String> fieldJListOp) {
        this.fieldJListOp = fieldJListOp;
    }

    public JList<String> getGraveJListOp() {
        return graveJListOp;
    }

    public void setGraveJListOp(JList<String> graveJListOp) {
        this.graveJListOp = graveJListOp;
    }

    public JList<String> getHandJListOp() {
        return handJListOp;
    }

    public void setHandJListOp(JList<String> handJListOp) {
        this.handJListOp = handJListOp;
    }

    public JLabel getLpOpJLabel() {
        return lpOpJLabel;
    }

    public void setLpOpJLabel(String s) {
        this.lpOpJLabel = lpOpJLabel;
    }

    public JLabel getNomeOponenteJLabel() {
        return nomeOponenteJLabel;
    }

    public void setNomeOponenteJLabel(JLabel nomeOponenteJLabel) {
        this.nomeOponenteJLabel = nomeOponenteJLabel;
    }

    public ArrayList<String> getDeckArrayL_Op() {
        return deckArrayL_Op;
    }

    public void setDeckArrayL_Op(ArrayList<String> deckArrayL_Op) {
        this.deckArrayL_Op = deckArrayL_Op;
    }

    public ArrayList<String> getHandArrayL_Op() {
        return handArrayL_Op;
    }

    public void setHandArrayL_Op(ArrayList<String> handArrayL_Op) {
        this.handArrayL_Op = handArrayL_Op;
    }

    public ArrayList<String> getGraveArrayL_Op() {
        return graveArrayL_Op;
    }

    public void setGraveArrayL_Op(ArrayList<String> graveArrayL_Op) {
        this.graveArrayL_Op = graveArrayL_Op;
    }

    public ArrayList<String> getFieldArrayL_Op() {
        return fieldArrayL_Op;
    }

    public void setFieldArrayL_Op(ArrayList<String> fieldArrayL_Op) {
        this.fieldArrayL_Op = fieldArrayL_Op;
    }
    //END
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JButton atacarJB1;
    private javax.swing.JButton ativarJB;
    private javax.swing.JButton battlePhaseJB;
    private javax.swing.JButton criarTokenJB;
    private javax.swing.JButton dano500JB;
    private javax.swing.JList<String> deckJList;
    private javax.swing.JList<String> deckJListOp;
    private javax.swing.JButton drawJB;
    public javax.swing.JButton drawPhaseJB;
    private javax.swing.JList<String> fieldJList;
    private javax.swing.JList<String> fieldJListOp;
    private javax.swing.JButton finalPhaseJB;
    private javax.swing.JList<String> graveJList;
    private javax.swing.JList<String> graveJListOp;
    private javax.swing.JList<String> handJList;
    private javax.swing.JList<String> handJListOp;
    private javax.swing.JButton invocarJB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JLabel lpJLabel;
    private javax.swing.JLabel lpOpJLabel;
    private javax.swing.JButton mainPhaseJB;
    private javax.swing.JLabel nomeJLabel;
    private javax.swing.JLabel nomeOponenteJLabel;
    private javax.swing.JButton shuffleJB;
    private javax.swing.JButton skillJB;
    private javax.swing.JButton surrenderJB;
    private javax.swing.JButton toGraveJB1;
    private javax.swing.JButton verJB;
    // End of variables declaration//GEN-END:variables
}
